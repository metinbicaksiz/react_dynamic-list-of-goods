{"version":3,"sources":["enums/LoadingTypes.ts","GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["LoadingTypes","GoodsList","memo","goods","map","name","color","style","getAll","fetch","then","response","ok","Error","status","statusText","json","get5First","sort","itemA","itemB","localeCompare","slice","getRed","filter","App","useState","setGoods","Default","currentLoadType","setCurrentLoadType","getGoods","useCallback","LoadingType","a","All","FiveFirst","Red","loadCallback","goodsFromServer","className","type","disabled","onClick","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,oECOCC,EAA6BC,gBAAK,YAAgB,IAAbC,EAAY,EAAZA,MAChD,OACE,6BACGA,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACT,oBAEEC,MAAO,CAAED,SACT,UAAQ,OAHV,SAKGD,GAJIA,Y,SDZHL,O,qBAAAA,I,aAAAA,I,yBAAAA,I,cAAAA,M,KEGL,SAASQ,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UAIf,IAAMC,EAAY,WACvB,OAAOT,IACJE,MAAK,SAAAP,GAAK,OACTA,EACGe,MAAK,SAACC,EAAOC,GAAR,OACJD,EAAMd,KAAKgB,cAAeD,EAAMf,SAEjCiB,MAAM,EAAG,OAILC,EAAS,WACpB,OAAOf,IACJE,MAAK,SAAAP,GAAK,OACTA,EAAMqB,QAAO,kBAAyB,QAAzB,EAAGlB,aCpBTmB,EAAUvB,gBAAK,WAC1B,MAA0BwB,mBAAsB,IAAhD,mBAAOvB,EAAP,KAAcwB,EAAd,KACA,EAA8CD,mBAAS1B,EAAa4B,SAApE,mBAAOC,EAAP,KAAwBC,EAAxB,KAEMC,EAAWC,sBAAW,uCAAC,WAAOC,GAAP,iBAAAC,EAAA,2DAGnBD,EAHmB,cAIpBjC,EAAamC,IAJO,SAOpBnC,EAAaoC,UAPO,SAUpBpC,EAAaqC,IAVO,wBAKvBC,EAAe9B,EALQ,mCAQvB8B,EAAerB,EARQ,mCAWvBqB,EAAef,EAXQ,kCAcjB,IAAIV,MAAM,6BAdO,yBAiBGyB,IAjBH,QAiBrBC,EAjBqB,OAmB3BZ,EAASY,GACTT,EAAmBG,GApBQ,4CAAD,sDAqBzB,IAEH,OACE,sBAAKO,UAAU,MAAf,UACE,uDAEA,wBACEA,UAAU,cACV,UAAQ,aACRC,KAAK,SACLC,SAAUb,IAAoB7B,EAAamC,IAC3CQ,QAAS,kBAAMZ,EAAS/B,EAAamC,MALvC,4BAUA,wBACEM,KAAK,SACL,UAAQ,oBACRD,UAAU,cACVE,SAAUb,IAAoB7B,EAAaoC,UAC3CO,QAAS,kBAAMZ,EAAS/B,EAAaoC,YALvC,gCAUA,wBACEK,KAAK,SACL,UAAQ,aACRD,UAAU,cACVE,SAAUb,IAAoB7B,EAAaqC,IAC3CM,QAAS,kBAAMZ,EAAS/B,EAAaqC,MALvC,4BAUA,cAACpC,EAAD,CAAWE,MAAOA,UClExByC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.df8c9e6d.chunk.js","sourcesContent":["export enum LoadingTypes {\n  Default,\n  All,\n  FiveFirst,\n  Red,\n}\n","import React, { memo } from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = memo(({ goods }) => {\n  return (\n    <ul>\n      {goods.map(({ name, color }) => (\n        <li\n          key={name}\n          style={{ color }}\n          data-cy=\"good\"\n        >\n          {name}\n        </li>\n      ))}\n    </ul>\n  );\n});\n","// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<GoodsItem[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = (): Promise<GoodsItem[]> => {\n  return getAll()\n    .then(goods => (\n      goods\n        .sort((itemA, itemB) => (\n          itemA.name.localeCompare((itemB.name))\n        ))\n        .slice(0, 5)\n    ));\n};\n\nexport const getRed = (): Promise<GoodsItem[]> => {\n  return getAll()\n    .then(goods => (\n      goods.filter(({ color }) => color === 'red')\n    ));\n};\n","import {\n  FC, memo, useCallback, useState,\n} from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\nimport { LoadingTypes } from './enums/LoadingTypes';\nimport { getAll, get5First, getRed } from './api/goods';\n\nexport const App: FC = memo(() => {\n  const [goods, setGoods] = useState<GoodsItem[]>([]);\n  const [currentLoadType, setCurrentLoadType] = useState(LoadingTypes.Default);\n\n  const getGoods = useCallback(async (LoadingType: LoadingTypes) => {\n    let loadCallback: GoodsPromise;\n\n    switch (LoadingType) {\n      case LoadingTypes.All:\n        loadCallback = getAll;\n        break;\n      case LoadingTypes.FiveFirst:\n        loadCallback = get5First;\n        break;\n      case LoadingTypes.Red:\n        loadCallback = getRed;\n        break;\n      default:\n        throw new Error('Error: invalid load type!');\n    }\n\n    const goodsFromServer = await loadCallback();\n\n    setGoods(goodsFromServer);\n    setCurrentLoadType(LoadingType);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      <button\n        className=\"App__button\"\n        data-cy=\"all-button\"\n        type=\"button\"\n        disabled={currentLoadType === LoadingTypes.All}\n        onClick={() => getGoods(LoadingTypes.All)}\n      >\n        Load all goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"first-five-button\"\n        className=\"App__button\"\n        disabled={currentLoadType === LoadingTypes.FiveFirst}\n        onClick={() => getGoods(LoadingTypes.FiveFirst)}\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"red-button\"\n        className=\"App__button\"\n        disabled={currentLoadType === LoadingTypes.Red}\n        onClick={() => getGoods(LoadingTypes.Red)}\n      >\n        Load red goods\n      </button>\n\n      <GoodsList goods={goods} />\n    </div>\n  );\n});\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}